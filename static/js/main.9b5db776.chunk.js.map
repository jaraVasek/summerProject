{"version":3,"sources":["config/Fire.js","movieRow.js","Home.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","MovieRow","url","this","props","movie","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","title","overview","style","textAlign","release_date","type","onClick","viewMovie","bind","value","popularity","React","Component","Home","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","logout","assertThisInitialized","state","performSearch","auth","signOut","searchTerm","_this2","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_movieRow","push","setState","rows","error","xhr","status","err","event","target","className","marginLeft","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","Login","login","handleChange","signup","email","password","e","defineProperty","name","preventDefault","signInWithEmailAndPassword","then","u","catch","createUserWithEmailAndPassword","class","for","aria-describedby","App","user","authListener","onAuthStateChanged","localStorage","setItem","uid","removeItem","src_Home","src_Login","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b5db776.chunk.js","sourcesContent":["//Firebase database imports for authentication for logging in and singout\nimport firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyDio1_vzU_qaSjt6EmmT2DFeTulFaspcJA\",\n    authDomain: \"project2-cfd54.firebaseapp.com\",\n    databaseURL: \"https://project2-cfd54.firebaseio.com\",\n    projectId: \"project2-cfd54\",\n    storageBucket: \"\",\n    messagingSenderId: \"258878266365\",\n  };\n  // Initialize Firebase\n  const fire = firebase.initializeApp(config);\nexport default fire;","import React from 'react'\n\nclass MovieRow extends React.Component {\n  //loads the movie\n  viewMovie() {\n    // console.log(\"Trying to view movie\")\n    // console.log(this.props.movie.title)\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n    window.location.href = url\n  }\n\n  //loads poster movie details, hyperlink button for more info and popularity vote\n  render() {\n    return <table key={this.props.movie.id}>\n    <tbody>\n      <tr>\n        <td>\n          <img id= \"img\" alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\n        </td>\n        <td>\n          <h3>{this.props.movie.title}</h3>\n          <p>{this.props.movie.overview}</p>\n          <h3 style={{textAlign:\"right\"}}>Release date {this.props.movie.release_date}</h3>\n          <input id=\"button\" type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View more info\"/>\n          <p>Popularity: {this.props.movie.popularity}</p>\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n  }\n}\n\nexport default MovieRow","import React, { Component } from 'react';\nimport fire from './config/Fire';\nimport './App.css'\nimport MovieRow from './movieRow.js'\nimport $ from 'jquery'\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.logout = this.logout.bind(this);\n        this.state = {}\n        // console.log(\"This is my initializer\")\n\n    //Landing page, random movie so landing page is not empty\n    this.performSearch(\"Disney\")\n    }\n\n    //signout\n    logout() {\n        fire.auth().signOut();\n    }\n\n    //API key from movieDB and  call to the movie DB API\n    performSearch(searchTerm) {\n        console.log(\"Perform search using moviedb\")\n        const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=2b00ca824af6a6215b7c632520adcbd5&query=\" + searchTerm\n        $.ajax({\n          url: urlString,\n          success: (searchResults) => {\n            console.log(\"Fetched data successfully\")\n            // console.log(searchResults)\n            const results = searchResults.results\n            // console.log(results[0])\n    \n            var movieRows = []\n    \n            //poster for each title\n            results.forEach((movie) => {\n              movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n              // console.log(movie.poster_path)\n              const movieRow = <MovieRow key={movie.id} movie={movie}/>\n              movieRows.push(movieRow)\n            })\n    \n            this.setState({rows: movieRows})\n          },\n          error: (xhr, status, err) => {\n            console.error(\"Failed to fetch data\")\n          }\n        })\n      }\n\n      //search bar\n    searchChangeHandler(event) {\n        console.log(event.target.value)\n        const boundObject = this\n        const searchTerm = event.target.value\n        boundObject.performSearch(searchTerm)\n      }\n\n\n    render() {\n        return (\n            <div>\n            <table className=\"titleBar\">\n              <tbody>\n                <tr>\n                  <td>\n                    <img alt=\"app icon\" width=\"50\" src=\"green_app_icon.svg\"/>\n                  </td>\n                  <td width=\"8\"/>\n                  <td>\n                    <h1>LookUP</h1>\n                  </td>\n                  <td>\n                  <button onClick={this.logout}style={{marginLeft: '900px'}} className=\"btn btn-danger\">Logout</button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n\n          \n            <input style={{\n              fontSize: 24,\n              display: 'block',\n              width: \"100%\",\n              paddingTop: 8,\n              paddingBottom: 8,\n              paddingLeft: 16\n            }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter search term\"/>\n    \n            {this.state.rows}\n    \n            </div>\n        );\n\n    }\n\n}\n\nexport default Home;\n\n","import React, { Component } from 'react';\n//import { Link } from 'react-router-dom';\nimport fire from './config/Fire';\nimport './App.css'\n\n//Login page\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.signup = this.signup.bind(this);\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n//login\n  login(e) {\n    e.preventDefault();\n    fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).catch((error) => {\n        console.log(error);\n      });\n  }\n\n  //signUp\n  signup(e){\n    e.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).then((u)=>{console.log(u)})\n    .catch((error) => {\n        console.log(error);\n      })\n  }\n  render() {\n    \n  return (\n\n//login form\n<div class=\"container\">\n<img alt=\"app icon\"  width=\"80\" style={{marginLeft: '180px'}}src=\"green_app_icon.svg\"/>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-6\">\n        <form>\n          <div class=\"form-group\">\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input  value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\n            <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input  value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\n          </div>\n          <button type=\"submit\" onClick={this.login} class=\"btn-lg btn-primary\">Login</button>\n          <button onClick={this.signup} style={{marginLeft: '25px'}} className=\"btn btn-danger\">Signup</button>\n        </form>\n        </div>\n  </div>\n</div>\n    );\n  }\n}\nexport default Login;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport fire from './config/Fire';\nimport Home from './Home';\nimport Login from './Login';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = ({\n      user: null,\n    });\n    this.authListener = this.authListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  //authentication\n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        this.setState({ user });\n        localStorage.setItem('user', user.uid);\n      } else {\n        this.setState({ user: null });\n        localStorage.removeItem('user');\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.user ? (\n          <Home />\n        ) :\n          (\n            <Login />\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}